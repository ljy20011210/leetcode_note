Initial Solution:
class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int left = 0;
        int right = nums.size()-1;
        int middle;
        if (target<nums[0])
            return 0;
        else if (target>nums[right])
            return right+1;
        while (left<=right){
            middle = left+(right-left)/2;
            if (nums[middle]<target)
                left = middle+1;
            else if (nums[middle]>target)
                right = middle-1;
            else 
                return middle;
        }
        if (left>nums.size()/2)
            return left;
        else if (right<nums.size()/2)
            return right+1;
        else
            return right;
    }
};

Improved Version:
class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int left = 0;
        int right = nums.size()-1;
        while (left<=right){
            int middle = left+(right-left)/2;
            if (nums[middle]<target)
                left = middle+1;
            else 
                right=middle-1;
        }
        return left;
    }
};
