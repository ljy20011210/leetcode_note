Initial Solution:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        if (head==nullptr)
            return head;
        //先数链表有几个元素
        int len = 1;
        ListNode* cur = head;
        while (cur->next){
            len++;
            cur = cur->next;
        }
        //删除倒数第n个
        ListNode* dummyhead = new ListNode(0);
        dummyhead->next = head;
        cur = dummyhead;
        int count = 0;
        while (count!=len-n){
            cur = cur->next;
            count++;
        }
        cur->next = cur->next->next;
        return dummyhead->next;
    }
};

Improved Version:（双指针法）
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        if (head==nullptr)
            return head;
        ListNode* dummyhead = new ListNode(0);
        dummyhead->next = head;
        ListNode* fast = dummyhead;
        ListNode* slow = dummyhead;
        //快指针先走n+1步
        n++;
        while (n-- && fast!=nullptr)
            fast = fast->next;
        while (fast!=nullptr){
            fast = fast->next;
            slow = slow->next;
        }
        slow->next = slow->next->next;
        return dummyhead->next;
    }
};
