法一：
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int minPrice = prices[0];
        int maxProfit = 0;
        for (int i=1;i<prices.size();i++){
            //找出左半边最小的价格
            if (prices[i]<minPrice)
                minPrice = prices[i];
            //计算最大的利润
            if (prices[i]-minPrice>maxProfit)
                maxProfit = prices[i]-minPrice;
        }
        return maxProfit;
    }
};

法二：
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int size = prices.size();
        vector<vector<int>> dp(size,vector<int>(2));
        dp[0][0] = -prices[0];
        dp[0][1] = 0;
        for (int i=1;i<size;i++){
            dp[i][0] = max(dp[i-1][0],-prices[i]);
            dp[i][1] = max(dp[i-1][1],dp[i-1][0]+prices[i]);
        }
        return dp[size-1][1];
    }
};

法二改进版：
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int size = prices.size();
        vector<vector<int>> dp(2,vector<int>(2));
        dp[0][0] = -prices[0];
        dp[0][1] = 0;
        for (int i=1;i<size;i++){
            dp[i%2][0] = max(dp[(i-1)%2][0],-prices[i]);
            dp[i%2][1] = max(dp[(i-1)%2][1],dp[(i-1)%2][0]+prices[i]);
        }
        return dp[(size-1)%2][1];
    }
};
