DFS:
class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        if (grid.size()==0 || grid[0].size()==0)
            return 0;
        int result = 0;
        int row = grid.size();
        int col = grid[0].size();
        for (int i=0;i<row;i++){
            for (int j=0;j<col;j++){
                if (grid[i][j]=='1'){
                    result++;
                    dfs(grid,i,j,row,col);
                }
            }
        }
        return result;
    }
    void dfs(vector<vector<char>>& grid, int x, int y, int row, int col){
        if (x<0 || y<0 || x>=row || y>=col || grid[x][y]=='0')
            return;
        grid[x][y] = '0';
        dfs(grid,x-1,y,row,col);
        dfs(grid,x+1,y,row,col);
        dfs(grid,x,y+1,row,col);
        dfs(grid,x,y-1,row,col);
    }
};

BFS:
class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        if (grid.size()==0)
            return 0;
        int result = 0;
        int row = grid.size();
        int col = grid[0].size();
        queue<pair<int,int>> q;
        for (int i=0;i<row;++i){
            for (int j=0;j<col;++j){
                if (grid[i][j]=='1'){
                    ++result;
                    grid[i][j] = '0';
                    q.push({i,j});
                    while (!q.empty()){
                        auto cur = q.front();
                        q.pop();
                        int x = cur.first;
                        int y = cur.second;
                        if (x-1>=0 && grid[x-1][y]=='1'){
                            q.push({x-1,y});
                            grid[x-1][y] = '0';
                        }
                        if (y-1>=0 && grid[x][y-1]=='1'){
                            q.push({x,y-1});
                            grid[x][y-1] = '0';
                        }
                        if (x+1<row && grid[x+1][y]=='1'){
                            q.push({x+1,y});
                            grid[x+1][y] = '0';
                        }
                        if (y+1<col && grid[x][y+1]=='1'){
                            q.push({x,y+1});
                            grid[x][y+1] = '0';
                        }
                    }
                }
            }
        }
        return result;
    }
};
