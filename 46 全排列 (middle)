class Solution {
public:
    vector<int> path;
    vector<vector<int>> result;
    void backtracking(vector<int>& nums, vector<bool>& used){
        //终止条件,收集子集
        if (path.size()==nums.size()){
            result.push_back(path);
            return;
        }
        for (int i=0;i<nums.size();i++){
            //处理节点
            //如果已经use了，就跳过
            if (used[i]==true)
                continue;
            used[i] = true;
            path.push_back(nums[i]);
            backtracking(nums,used);
            //回溯
            used[i] = false;
            path.pop_back();
        }
    }
    vector<vector<int>> permute(vector<int>& nums) {
        result.clear();
        path.clear();
        vector<bool> used(nums.size(),false);
        backtracking(nums,used);
        return result;
    }
};
