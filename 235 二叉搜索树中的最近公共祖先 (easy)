Initial Solution:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        int minimum = min(p->val,q->val);
        int maximum = max(p->val,q->val);
        TreeNode* result = NULL;
        if (root->val>=minimum && root->val<=maximum)
            return root;
        else if (root->val<minimum)
            result = lowestCommonAncestor(root->right,p,q);
        else
            result = lowestCommonAncestor(root->left,p,q);
        return result;
    }
};

Improved Version:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if (root->val>p->val && root->val>q->val)
            return lowestCommonAncestor(root->left,p,q);
        else if (root->val<p->val && root->val<q->val)
            return lowestCommonAncestor(root->right,p,q);
        else
            return root;
    }
};
